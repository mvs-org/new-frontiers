(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{361:function(s,t,a){"use strict";a.r(t);var e=a(42),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("This page will guide you through the steps needed to prepare a computer for development with the\nMetaverseVM. Since it is built with\n"),a("a",{attrs:{href:"https://www.rust-lang.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("the Rust programming language"),a("OutboundLink")],1),s._v(", the first thing you will need to do is\nprepare the computer for Rust development - these steps will vary based on the computer's operating\nsystem. Once Rust is configured, you will use its toolchains to interact with Rust projects; the\ncommands for Rust's toolchains will be the same for all supported, Unix-based operating systems.")]),s._v(" "),a("h2",{attrs:{id:"unix-based-operating-systems"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unix-based-operating-systems"}},[s._v("#")]),s._v(" Unix-Based Operating Systems")]),s._v(" "),a("p",[s._v("Development is easiest on Unix-based operating systems like macOS or Linux.")]),s._v(" "),a("h3",{attrs:{id:"macos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#macos"}},[s._v("#")]),s._v(" macOS")]),s._v(" "),a("p",[s._v("Open the Terminal application and execute the following commands:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Install Homebrew if necessary https://brew.sh/")]),s._v("\n/bin/bash -c "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Make sure Homebrew is up-to-date, install openssl and cmake")]),s._v("\nbrew update\nbrew "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" openssl cmake\n")])])]),a("h3",{attrs:{id:"ubuntu-debian"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu-debian"}},[s._v("#")]),s._v(" Ubuntu/Debian")]),s._v(" "),a("p",[s._v("Use a terminal shell to execute the following commands:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" update\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# May prompt for location information")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y cmake pkg-config libssl-dev "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" build-essential clang libclang-dev "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v("\n")])])]),a("h3",{attrs:{id:"arch-linux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arch-linux"}},[s._v("#")]),s._v(" Arch Linux")]),s._v(" "),a("p",[s._v("Run these commands from a terminal:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("pacman -Syu --needed --noconfirm cmake gcc openssl-1.0 pkgconf "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clang\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("OPENSSL_LIB_DIR")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/lib/openssl-1.0"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("OPENSSL_INCLUDE_DIR")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/include/openssl-1.0"')]),s._v("\n")])])]),a("h3",{attrs:{id:"fedora-rhel-centos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fedora-rhel-centos"}},[s._v("#")]),s._v(" Fedora/RHEL/CentOS")]),s._v(" "),a("p",[s._v("Use a terminal to run the following commands:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Update")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" dnf update\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Install packages")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" dnf "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" cmake pkgconfig rocksdb rocksdb-devel llvm "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" libcurl libcurl-devel curl-devel clang\n")])])]),a("h2",{attrs:{id:"rust-developer-environment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rust-developer-environment"}},[s._v("#")]),s._v(" Rust Developer Environment")]),s._v(" "),a("p",[s._v("This project uses "),a("a",{attrs:{href:"https://rustup.rs/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("rustup")]),a("OutboundLink")],1),s._v(" to help manage the Rust toolchain. First install\nand configure "),a("code",[s._v("rustup")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Install")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" https://sh.rustup.rs -sSf "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Configure")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" ~/.cargo/env\n")])])]),a("p",[s._v("Finally, configure the Rust toolchain:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("rustup default stable\nrustup update nightly\nrustup update stable\nrustup target "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" wasm32-unknown-unknown --toolchain nightly\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);